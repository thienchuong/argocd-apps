karpenter:
  # -- Overrides the chart's name.
  nameOverride: ""
  # -- Overrides the chart's computed fullname.
  fullnameOverride: ""
  # -- Additional labels to add into metadata.
  additionalLabels: {}
  # app: karpenter

  # -- Additional annotations to add into metadata.
  additionalAnnotations: {}
  # -- Image pull policy for Docker images.
  imagePullPolicy: IfNotPresent
  # -- Image pull secrets for Docker images.
  imagePullSecrets: []
  serviceAccount:
    # -- Specifies if a ServiceAccount should be created.
    create: true
    # -- The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template.
    name: "karpenter"
    # -- Additional annotations for the ServiceAccount.
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::248666422610:role/karpenter"
  serviceMonitor:
    # -- Specifies whether a ServiceMonitor should be created.
    enabled: false
    # -- Additional labels for the ServiceMonitor.
    additionalLabels: {}
    # -- Endpoint configuration for the ServiceMonitor.
    endpointConfig: {}
  # -- Number of replicas.
  replicas: 1
  # -- Strategy for updating the pod.
  strategy:
    type: Recreate
  # -- Additional labels for the pod.
  podLabels: {}
  # -- Additional annotations for the pod.
  podAnnotations: {}
  # -- SecurityContext for the pod.
  podSecurityContext:
    fsGroup: 1000
  # -- PriorityClass name for the pod.
  priorityClassName: system-cluster-critical
  # -- Override the default termination grace period for the pod.
  terminationGracePeriodSeconds:
  # -- Bind the pod to the host network.
  # This is required when using a custom CNI.
  hostNetwork: false
  # -- Node selectors to schedule the pod to nodes with labels.
  nodeSelector:
    kubernetes.io/os: linux
  # -- Affinity rules for scheduling the pod.
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: karpenter.sh/provisioner-default
                operator: DoesNotExist
  # -- Tolerations to allow the pod to be scheduled to nodes with taints.
  tolerations: []
  controller:
    # -- Controller image.
    image: "public.ecr.aws/karpenter/controller:v0.7.0@sha256:1afafbdab75bfbd93729c6fd61ef5d12b071498413579fd45e85af1c89680717"
    # -- SecurityContext for the controller container.
    securityContext: {}
    # -- Additional environment variables for the controller pod.
    env: []
    # - name: AWS_REGION
    # - value: eu-west-1

    # -- Resources for the controller pod.
    resources:
      requests:
        cpu: 1
        memory: 1Gi
      limits:
        cpu: 1
        memory: 1Gi
    # -- Controller log level, defaults to the global log level
    logLevel: debug
  webhook:
    # -- Webhook image.
    image: "public.ecr.aws/karpenter/webhook:v0.7.0@sha256:3e4128fbf16f055a1a82d7141607255fc6d619e8698f41c1a7863f03cbfd506c"
    # -- SecurityContext for the webhook container.
    securityContext: {}
    # -- The container port to use for the webhook.
    port: 8443
    # -- Additional environment variables for the webhook pod.
    env: []
    # - name: AWS_REGION
    # - value: eu-west-1

    # -- Resources for the webhook pod.
    resources:
      requests:
        cpu: 100m
        memory: 50Mi
      limits:
        cpu: 100m
        memory: 50Mi
    # -- Webhook log level, defaults to the global log level
    logLevel: ""
  # -- Global log level
  logLevel: debug
  # -- Cluster name.
  clusterName: "eks-dr"
  # -- Cluster endpoint.
  clusterEndpoint: "https://C3C5169DDD6FD5B9D1BBC7BC6D230427.gr7.ap-southeast-1.eks.amazonaws.com"
  aws:
    # -- The default instance profile to use when launching nodes on AWS
    defaultInstanceProfile: "KarpenterNodeInstanceProfile-eks-dr"
